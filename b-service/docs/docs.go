// Package docs Code generated by swaggo/swag. DO NOT EDIT
package docs

import "github.com/swaggo/swag"

const docTemplate = `{
    "schemes": {{ marshal .Schemes }},
    "swagger": "2.0",
    "info": {
        "description": "{{escape .Description}}",
        "title": "{{.Title}}",
        "termsOfService": "http://swagger.io/terms/",
        "contact": {
            "name": "API Support",
            "url": "http://www.swagger.io/support",
            "email": "support@swagger.io"
        },
        "license": {
            "name": "Apache 2.0",
            "url": "http://www.apache.org/licenses/LICENSE-2.0.html"
        },
        "version": "{{.Version}}"
    },
    "host": "{{.Host}}",
    "basePath": "{{.BasePath}}",
    "paths": {
        "/sensor": {
            "get": {
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "sensor"
                ],
                "summary": "List sensor readings (paginated)",
                "parameters": [
                    {
                        "minimum": 1,
                        "type": "integer",
                        "default": 1,
                        "description": "Page number",
                        "name": "page",
                        "in": "query"
                    },
                    {
                        "maximum": 500,
                        "minimum": 1,
                        "type": "integer",
                        "default": 50,
                        "description": "Page size",
                        "name": "page_size",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "data: SensorPage",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/model.Envelope"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "$ref": "#/definitions/model.SensorPage"
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "400": {
                        "description": "error=true, message explains",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/model.Envelope"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "$ref": "#/definitions/model.Empty"
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/model.Envelope"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "$ref": "#/definitions/model.Empty"
                                        }
                                    }
                                }
                            ]
                        }
                    }
                }
            }
        },
        "/sensor/ids": {
            "get": {
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "sensor"
                ],
                "summary": "List sensor readings filtered by ID combinations (paginated)",
                "parameters": [
                    {
                        "minimum": 1,
                        "type": "integer",
                        "default": 1,
                        "description": "Page number",
                        "name": "page",
                        "in": "query"
                    },
                    {
                        "maximum": 500,
                        "minimum": 1,
                        "type": "integer",
                        "default": 50,
                        "description": "Page size",
                        "name": "page_size",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "example": "0,1,2",
                        "description": "Comma-separated ID1 values",
                        "name": "id1",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "example": "A,B,C",
                        "description": "Comma-separated ID2 values",
                        "name": "id2",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "data: SensorPage",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/model.Envelope"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "$ref": "#/definitions/model.SensorPage"
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "400": {
                        "description": "error=true, message explains",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/model.Envelope"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "$ref": "#/definitions/model.Empty"
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/model.Envelope"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "$ref": "#/definitions/model.Empty"
                                        }
                                    }
                                }
                            ]
                        }
                    }
                }
            }
        },
        "/sensor/ids-time": {
            "get": {
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "sensor"
                ],
                "summary": "List sensor readings filtered by ID combinations and time range (paginated)",
                "parameters": [
                    {
                        "minimum": 1,
                        "type": "integer",
                        "default": 1,
                        "description": "Page number",
                        "name": "page",
                        "in": "query"
                    },
                    {
                        "maximum": 500,
                        "minimum": 1,
                        "type": "integer",
                        "default": 50,
                        "description": "Page size",
                        "name": "page_size",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "example": "0,1,2",
                        "description": "Comma-separated ID1 values",
                        "name": "id1",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "example": "A,B,C",
                        "description": "Comma-separated ID2 values",
                        "name": "id2",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "example": "2023-01-01T00:00:00Z",
                        "description": "Start time (RFC3339)",
                        "name": "from_time",
                        "in": "query",
                        "required": true
                    },
                    {
                        "type": "string",
                        "example": "2023-12-31T23:59:59Z",
                        "description": "End time (RFC3339)",
                        "name": "to_time",
                        "in": "query",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "data: SensorPage",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/model.Envelope"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "$ref": "#/definitions/model.SensorPage"
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "400": {
                        "description": "error=true, message explains",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/model.Envelope"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "$ref": "#/definitions/model.Empty"
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/model.Envelope"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "$ref": "#/definitions/model.Empty"
                                        }
                                    }
                                }
                            ]
                        }
                    }
                }
            }
        },
        "/sensor/time": {
            "get": {
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "sensor"
                ],
                "summary": "List sensor readings filter by time(paginated)",
                "parameters": [
                    {
                        "minimum": 1,
                        "type": "integer",
                        "default": 1,
                        "description": "Page number",
                        "name": "page",
                        "in": "query"
                    },
                    {
                        "maximum": 500,
                        "minimum": 1,
                        "type": "integer",
                        "default": 50,
                        "description": "Page size",
                        "name": "page_size",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "default": "2006-01-02T15:04:05.999999999+07:00",
                        "description": "from time",
                        "name": "from",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "default": "2006-01-02T15:04:05.999999999+07:00",
                        "description": "to time",
                        "name": "to",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "data: SensorPage",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/model.Envelope"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "$ref": "#/definitions/model.SensorPage"
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "400": {
                        "description": "error=true, message explains",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/model.Envelope"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "$ref": "#/definitions/model.Empty"
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/model.Envelope"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "$ref": "#/definitions/model.Empty"
                                        }
                                    }
                                }
                            ]
                        }
                    }
                }
            }
        }
    },
    "definitions": {
        "model.Empty": {
            "type": "object"
        },
        "model.Envelope": {
            "type": "object",
            "properties": {
                "data": {},
                "error": {
                    "type": "boolean",
                    "example": false
                },
                "message": {
                    "type": "string",
                    "example": "ok"
                }
            }
        },
        "model.SensorPage": {
            "type": "object",
            "properties": {
                "items": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/model.SensorPayload"
                    }
                },
                "page": {
                    "type": "integer",
                    "example": 1
                },
                "pageSize": {
                    "type": "integer",
                    "example": 50
                },
                "total": {
                    "type": "integer",
                    "example": 1234
                }
            }
        },
        "model.SensorPayload": {
            "type": "object",
            "properties": {
                "id1": {
                    "type": "string",
                    "example": "abc-123"
                },
                "id2": {
                    "type": "integer",
                    "example": 123
                },
                "sensorType": {
                    "type": "string",
                    "example": "temperature"
                },
                "timestampMs": {
                    "type": "integer",
                    "example": 1724550000000
                },
                "value": {
                    "type": "number",
                    "example": 23.5
                }
            }
        }
    },
    "securityDefinitions": {
        "ApiKeyAuth": {
            "description": "Description for what is this security definition being used",
            "type": "apiKey",
            "name": "Authorization",
            "in": "header"
        },
        "BasicAuth": {
            "type": "basic"
        },
        "OAuth2AccessCode": {
            "type": "oauth2",
            "flow": "accessCode",
            "authorizationUrl": "https://example.com/oauth/authorize",
            "tokenUrl": "https://example.com/oauth/token",
            "scopes": {
                "admin": "Grants read and write access to administrative information"
            }
        },
        "OAuth2Application": {
            "type": "oauth2",
            "flow": "application",
            "tokenUrl": "https://example.com/oauth/token",
            "scopes": {
                "admin": "Grants read and write access to administrative information",
                "write": "Grants write access"
            }
        },
        "OAuth2Implicit": {
            "type": "oauth2",
            "flow": "implicit",
            "authorizationUrl": "https://example.com/oauth/authorize",
            "scopes": {
                "admin": "Grants read and write access to administrative information",
                "write": "Grants write access"
            }
        },
        "OAuth2Password": {
            "type": "oauth2",
            "flow": "password",
            "tokenUrl": "https://example.com/oauth/token",
            "scopes": {
                "admin": "Grants read and write access to administrative information",
                "read": "Grants read access",
                "write": "Grants write access"
            }
        }
    }
}`

// SwaggerInfo holds exported Swagger Info so clients can modify it
var SwaggerInfo = &swag.Spec{
	Version:          "1.0",
	Host:             "localhost:8080",
	BasePath:         "/api/v1",
	Schemes:          []string{},
	Title:            "WORLDER TEAM ASSIGNMENT",
	Description:      "This is a sample server celler server.",
	InfoInstanceName: "swagger",
	SwaggerTemplate:  docTemplate,
	LeftDelim:        "{{",
	RightDelim:       "}}",
}

func init() {
	swag.Register(SwaggerInfo.InstanceName(), SwaggerInfo)
}
