basePath: /api/v1
definitions:
  model.Empty:
    type: object
  model.Envelope:
    properties:
      data: {}
      error:
        example: false
        type: boolean
      message:
        example: ok
        type: string
    type: object
  model.SensorPage:
    properties:
      items:
        items:
          $ref: '#/definitions/model.SensorPayload'
        type: array
      page:
        example: 1
        type: integer
      pageSize:
        example: 50
        type: integer
      total:
        example: 1234
        type: integer
    type: object
  model.SensorPayload:
    properties:
      id1:
        example: abc-123
        type: string
      id2:
        example: 123
        type: integer
      sensorType:
        example: temperature
        type: string
      timestampMs:
        example: 1724550000000
        type: integer
      value:
        example: 23.5
        type: number
    type: object
host: localhost:8080
info:
  contact:
    email: support@swagger.io
    name: API Support
    url: http://www.swagger.io/support
  description: This is a sample server celler server.
  license:
    name: Apache 2.0
    url: http://www.apache.org/licenses/LICENSE-2.0.html
  termsOfService: http://swagger.io/terms/
  title: WORLDER TEAM ASSIGNMENT
  version: "1.0"
paths:
  /sensor:
    get:
      consumes:
      - application/json
      parameters:
      - default: 1
        description: Page number
        in: query
        minimum: 1
        name: page
        type: integer
      - default: 50
        description: Page size
        in: query
        maximum: 500
        minimum: 1
        name: page_size
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: 'data: SensorPage'
          schema:
            allOf:
            - $ref: '#/definitions/model.Envelope'
            - properties:
                data:
                  $ref: '#/definitions/model.SensorPage'
              type: object
        "400":
          description: error=true, message explains
          schema:
            allOf:
            - $ref: '#/definitions/model.Envelope'
            - properties:
                data:
                  $ref: '#/definitions/model.Empty'
              type: object
        "500":
          description: Internal Server Error
          schema:
            allOf:
            - $ref: '#/definitions/model.Envelope'
            - properties:
                data:
                  $ref: '#/definitions/model.Empty'
              type: object
      summary: List sensor readings (paginated)
      tags:
      - sensor
  /sensor/ids:
    get:
      consumes:
      - application/json
      parameters:
      - default: 1
        description: Page number
        in: query
        minimum: 1
        name: page
        type: integer
      - default: 50
        description: Page size
        in: query
        maximum: 500
        minimum: 1
        name: page_size
        type: integer
      - description: Comma-separated ID1 values
        example: 0,1,2
        in: query
        name: id1
        type: string
      - description: Comma-separated ID2 values
        example: A,B,C
        in: query
        name: id2
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: 'data: SensorPage'
          schema:
            allOf:
            - $ref: '#/definitions/model.Envelope'
            - properties:
                data:
                  $ref: '#/definitions/model.SensorPage'
              type: object
        "400":
          description: error=true, message explains
          schema:
            allOf:
            - $ref: '#/definitions/model.Envelope'
            - properties:
                data:
                  $ref: '#/definitions/model.Empty'
              type: object
        "500":
          description: Internal Server Error
          schema:
            allOf:
            - $ref: '#/definitions/model.Envelope'
            - properties:
                data:
                  $ref: '#/definitions/model.Empty'
              type: object
      summary: List sensor readings filtered by ID combinations (paginated)
      tags:
      - sensor
  /sensor/ids-time:
    get:
      consumes:
      - application/json
      parameters:
      - default: 1
        description: Page number
        in: query
        minimum: 1
        name: page
        type: integer
      - default: 50
        description: Page size
        in: query
        maximum: 500
        minimum: 1
        name: page_size
        type: integer
      - description: Comma-separated ID1 values
        example: 0,1,2
        in: query
        name: id1
        type: string
      - description: Comma-separated ID2 values
        example: A,B,C
        in: query
        name: id2
        type: string
      - description: Start time (RFC3339)
        example: "2023-01-01T00:00:00Z"
        in: query
        name: from_time
        required: true
        type: string
      - description: End time (RFC3339)
        example: "2023-12-31T23:59:59Z"
        in: query
        name: to_time
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: 'data: SensorPage'
          schema:
            allOf:
            - $ref: '#/definitions/model.Envelope'
            - properties:
                data:
                  $ref: '#/definitions/model.SensorPage'
              type: object
        "400":
          description: error=true, message explains
          schema:
            allOf:
            - $ref: '#/definitions/model.Envelope'
            - properties:
                data:
                  $ref: '#/definitions/model.Empty'
              type: object
        "500":
          description: Internal Server Error
          schema:
            allOf:
            - $ref: '#/definitions/model.Envelope'
            - properties:
                data:
                  $ref: '#/definitions/model.Empty'
              type: object
      summary: List sensor readings filtered by ID combinations and time range (paginated)
      tags:
      - sensor
  /sensor/time:
    get:
      consumes:
      - application/json
      parameters:
      - default: 1
        description: Page number
        in: query
        minimum: 1
        name: page
        type: integer
      - default: 50
        description: Page size
        in: query
        maximum: 500
        minimum: 1
        name: page_size
        type: integer
      - default: "2006-01-02T15:04:05.999999999+07:00"
        description: from time
        in: query
        name: from
        type: string
      - default: "2006-01-02T15:04:05.999999999+07:00"
        description: to time
        in: query
        name: to
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: 'data: SensorPage'
          schema:
            allOf:
            - $ref: '#/definitions/model.Envelope'
            - properties:
                data:
                  $ref: '#/definitions/model.SensorPage'
              type: object
        "400":
          description: error=true, message explains
          schema:
            allOf:
            - $ref: '#/definitions/model.Envelope'
            - properties:
                data:
                  $ref: '#/definitions/model.Empty'
              type: object
        "500":
          description: Internal Server Error
          schema:
            allOf:
            - $ref: '#/definitions/model.Envelope'
            - properties:
                data:
                  $ref: '#/definitions/model.Empty'
              type: object
      summary: List sensor readings filter by time(paginated)
      tags:
      - sensor
securityDefinitions:
  ApiKeyAuth:
    description: Description for what is this security definition being used
    in: header
    name: Authorization
    type: apiKey
  BasicAuth:
    type: basic
  OAuth2AccessCode:
    authorizationUrl: https://example.com/oauth/authorize
    flow: accessCode
    scopes:
      admin: Grants read and write access to administrative information
    tokenUrl: https://example.com/oauth/token
    type: oauth2
  OAuth2Application:
    flow: application
    scopes:
      admin: Grants read and write access to administrative information
      write: Grants write access
    tokenUrl: https://example.com/oauth/token
    type: oauth2
  OAuth2Implicit:
    authorizationUrl: https://example.com/oauth/authorize
    flow: implicit
    scopes:
      admin: Grants read and write access to administrative information
      write: Grants write access
    type: oauth2
  OAuth2Password:
    flow: password
    scopes:
      admin: Grants read and write access to administrative information
      read: Grants read access
      write: Grants write access
    tokenUrl: https://example.com/oauth/token
    type: oauth2
swagger: "2.0"
