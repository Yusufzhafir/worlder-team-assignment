basePath: /api/v1
definitions:
  generator.frequencyRequest:
    properties:
      timeout:
        example: 2s
        type: string
    type: object
  model.Empty:
    type: object
  model.Envelope:
    properties:
      data: {}
      error:
        example: false
        type: boolean
      message:
        example: ok
        type: string
    type: object
  usecase.GeneratorConfig:
    properties:
      id1:
        type: string
      id2:
        type: integer
      server_addr:
        type: string
      type:
        type: string
      value:
        type: number
    type: object
  usecase.SpamRequest:
    properties:
      concurrency:
        type: integer
      id1:
        type: string
      id2:
        type: integer
      timeout:
        type: string
      total:
        type: integer
      type:
        type: string
      value:
        type: number
    type: object
host: localhost:9000
info:
  contact:
    email: support@swagger.io
    name: API Support
    url: http://www.swagger.io/support
  description: This is a sample server celler server.
  license:
    name: Apache 2.0
    url: http://www.apache.org/licenses/LICENSE-2.0.html
  termsOfService: http://swagger.io/terms/
  title: WORLDER TEAM ASSIGNMENT
  version: "1.0"
paths:
  /config:
    post:
      consumes:
      - application/json
      description: Update sensor configuration including value, type, IDs, and server
        address
      parameters:
      - description: Generator configuration
        in: body
        name: config
        required: true
        schema:
          $ref: '#/definitions/usecase.GeneratorConfig'
      produces:
      - application/json
      responses:
        "200":
          description: succesfully updated config
          schema:
            allOf:
            - $ref: '#/definitions/model.Envelope'
            - properties:
                data:
                  $ref: '#/definitions/model.Empty'
              type: object
        "400":
          description: error=true, message explains
          schema:
            allOf:
            - $ref: '#/definitions/model.Envelope'
            - properties:
                data:
                  $ref: '#/definitions/model.Empty'
              type: object
        "500":
          description: Internal Server Error
          schema:
            allOf:
            - $ref: '#/definitions/model.Envelope'
            - properties:
                data:
                  $ref: '#/definitions/model.Empty'
              type: object
      summary: Configure sensor parameters
      tags:
      - generator
  /frequency:
    post:
      description: Set the frequency of data generation in requests per second
      parameters:
      - description: frequency request timeout duration
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/generator.frequencyRequest'
      produces:
      - application/json
      responses:
        "200":
          description: Frequency updated successfully
          schema:
            allOf:
            - $ref: '#/definitions/model.Envelope'
            - properties:
                data:
                  $ref: '#/definitions/generator.frequencyRequest'
              type: object
        "400":
          description: Invalid frequency value
          schema:
            allOf:
            - $ref: '#/definitions/model.Envelope'
            - properties:
                data:
                  $ref: '#/definitions/model.Empty'
              type: object
      summary: Set generation frequency
      tags:
      - generator
  /spam:
    post:
      consumes:
      - application/json
      description: Send multiple concurrent requests to the gRPC service for load
        testing
      parameters:
      - description: Spam request configuration
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/usecase.SpamRequest'
      produces:
      - application/json
      responses:
        "200":
          description: Spam requests completed
          schema:
            allOf:
            - $ref: '#/definitions/model.Envelope'
            - properties:
                data:
                  additionalProperties: true
                  type: object
              type: object
        "400":
          description: Invalid request body
          schema:
            allOf:
            - $ref: '#/definitions/model.Envelope'
            - properties:
                data:
                  $ref: '#/definitions/model.Empty'
              type: object
      summary: Execute spam requests
      tags:
      - generator
  /start:
    post:
      description: Start continuous data generation to the gRPC service
      produces:
      - application/json
      responses:
        "200":
          description: Data generation started successfully
          schema:
            allOf:
            - $ref: '#/definitions/model.Envelope'
            - properties:
                data:
                  $ref: '#/definitions/model.Empty'
              type: object
        "400":
          description: Generator already running
          schema:
            allOf:
            - $ref: '#/definitions/model.Envelope'
            - properties:
                data:
                  $ref: '#/definitions/model.Empty'
              type: object
      summary: Start data generation
      tags:
      - generator
  /stats:
    get:
      description: Retrieve current statistics including total sent and failed requests
      produces:
      - application/json
      responses:
        "200":
          description: Statistics retrieved successfully
          schema:
            allOf:
            - $ref: '#/definitions/model.Envelope'
            - properties:
                data:
                  additionalProperties: true
                  type: object
              type: object
      summary: Get generation statistics
      tags:
      - generator
  /stop:
    post:
      description: Stop continuous data generation
      produces:
      - application/json
      responses:
        "200":
          description: Data generation stopped successfully
          schema:
            allOf:
            - $ref: '#/definitions/model.Envelope'
            - properties:
                data:
                  $ref: '#/definitions/model.Empty'
              type: object
        "400":
          description: Generator already stopped
          schema:
            allOf:
            - $ref: '#/definitions/model.Envelope'
            - properties:
                data:
                  $ref: '#/definitions/model.Empty'
              type: object
      summary: Stop data generation
      tags:
      - generator
securityDefinitions:
  ApiKeyAuth:
    description: Description for what is this security definition being used
    in: header
    name: Authorization
    type: apiKey
  BasicAuth:
    type: basic
  OAuth2AccessCode:
    authorizationUrl: https://example.com/oauth/authorize
    flow: accessCode
    scopes:
      admin: Grants read and write access to administrative information
    tokenUrl: https://example.com/oauth/token
    type: oauth2
  OAuth2Application:
    flow: application
    scopes:
      admin: Grants read and write access to administrative information
      write: Grants write access
    tokenUrl: https://example.com/oauth/token
    type: oauth2
  OAuth2Implicit:
    authorizationUrl: https://example.com/oauth/authorize
    flow: implicit
    scopes:
      admin: Grants read and write access to administrative information
      write: Grants write access
    type: oauth2
  OAuth2Password:
    flow: password
    scopes:
      admin: Grants read and write access to administrative information
      read: Grants read access
      write: Grants write access
    tokenUrl: https://example.com/oauth/token
    type: oauth2
swagger: "2.0"
